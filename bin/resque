#!/usr/bin/env php
<?php

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE (' . $APP_INCLUDE . ") does not exist.\n");
    }

    require_once $APP_INCLUDE;

} else {

    // Find and initialize Composer
    $files = array(
        __DIR__ . '/../../vendor/autoload.php',
        __DIR__ . '/../../../autoload.php',
        __DIR__ . '/../../../../autoload.php',
        __DIR__ . '/../vendor/autoload.php',
    );

    foreach ($files as $file) {
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }

    if (!class_exists('Composer\Autoload\ClassLoader', false)) {
        die(
            'You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
    }
}

use React\Promise;
use React\Stream;
use React\EventLoop;

use Clue\React\Redis;
use Iwai\React\Resque;


$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

$REDIS_BACKEND   = getenv('REDIS_BACKEND');
$REDIS_DATABASE  = getenv('REDIS_DATABASE');
$REDIS_NAMESPACE = getenv('REDIS_NAMESPACE');
$REDIS_PASSWORD  = getenv('REDIS_PASSWORD') == '' ? null : getenv('REDIS_PASSWORD');

$LOG_HANDLER        = getenv('LOGHANDLER');
$LOG_HANDLER_TARGET = getenv('LOGHANDLERTARGET');

$logger = new MonologInit\MonologInit($LOG_HANDLER, $LOG_HANDLER_TARGET);

if (!empty($REDIS_BACKEND)) {
    Resque::setBackend($REDIS_BACKEND, $REDIS_DATABASE, $REDIS_NAMESPACE, $REDIS_PASSWORD);
}

$logLevel = Resque_Worker::LOG_NONE;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = Resque_Worker::LOG_NORMAL;
} elseif (!empty($VVERBOSE)) {
    $logLevel = Resque_Worker::LOG_VERBOSE;
}

$interval = 3;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$PIDFILE = getenv('PIDFILE');

if ($PIDFILE) {
    file_put_contents($PIDFILE, getmypid()) or die('Could not write PID information to ' . $PIDFILE);
} else {
    echo getmypid().PHP_EOL;
}

$loop  = EventLoop\Factory::create();

$worker = new Resque\Worker(
    [
        'redis'	=> [
            'backend'	=> $REDIS_BACKEND   ? $REDIS_BACKEND   : '127.0.0.1:6379',
            'namespace'	=> $REDIS_NAMESPACE ? $REDIS_NAMESPACE : 'resque',
            'database'	=> $REDIS_DATABASE  ? $REDIS_DATABASE  : 0
        ],
        'queue'    => $QUEUE,
        'interval' => $interval,
//        'ttl'      => $ttl,
        'log' => [
            'level'		=> $logLevel,
            'handler'	=> $LOG_HANDLER ? $LOG_HANDLER : 'Stream',
            'target'	=> $LOG_HANDLER_TARGET ? $LOG_HANDLER_TARGET : '-'
        ]
    ],
    $loop
);

$worker->run();

